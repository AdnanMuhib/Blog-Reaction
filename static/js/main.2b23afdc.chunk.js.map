{"version":3,"sources":["components/navbar/NavBar.js","services/BlogAPI.js","components/posts/PostList.js","components/posts/PostView.js","components/posts/PostForm.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["TabContainer","props","react_default","a","createElement","Typography","component","style","padding","children","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","NavBar","classes","_React$useState","React","useState","_React$useState2","Object","slicedToArray","value","setValue","className","AppBar","position","Tabs","onChange","event","newValue","centered","Tab","label","react_router_dom","to","color","BlogAPI","axiosInstance","axios","create","baseURL","timeout","getPost","id","_this","get","getPosts","submitPost","postData","post","title","body","tags","updatePost","put","deletePost","delete","PostList","state","posts","loading","error","errorMSG","API","setState","then","response","data","catch","errors","finally","this","_this2","CircularProgress","Grid","container","spacing","item","xs","Paper","Table","table","TableHead","TableRow","TableCell","align","TableBody","map","row","key","scope","Button","button","variant","onClick","Delete_default","Edit_default","success","Add_default","Component","withStyles","width","marginTop","overflowX","minWidth","close","green","PostView","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","console","log","match","params","prevProps","Card","card","CardContent","pos","CardActions","size","bullet","display","margin","transform","fontSize","marginBottom","PostForm","redirect","handleChange","name","defineProperty","target","getExistingPost","postId","submitNewPost","updateExistingPost","handleFormSubmit","preventDefault","updateMode","undefined","react_router","push","submitButton","type","onSubmit","TextField","textField","multiline","rowsMax","helperText","input","dense","Home","App","path","exact","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b23afdc.chunk.js","sourcesContent":["// React Imports\r\nimport React from \"react\";\r\n\r\n// material UI Imports\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AppBar, Tabs, Tab } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n// React Router Imports\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction TabContainer(props) {\r\n  return (\r\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\nexport default function NavBar() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  function handleChange(event, newValue) {\r\n    setValue(newValue);\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Tabs value={value} onChange={handleChange} centered>\r\n          <Tab\r\n            label={\r\n              <Link to=\"/Blog-Reaction\" style={{ color: \"white\" }}>\r\n                Home\r\n              </Link>\r\n            }\r\n          />\r\n          <Tab\r\n            label={\r\n              <Link to=\"/Blog-Reaction/posts\" style={{ color: \"white\" }}>\r\n                Blog\r\n              </Link>\r\n            }\r\n          />\r\n        </Tabs>\r\n      </AppBar>\r\n      {/* To Display something Fixed under Home tab */}\r\n      {value === 0 && <TabContainer />}\r\n      {/* To Display something Fixed under Blog tab */}\r\n      {value === 1 && <TabContainer />}\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nclass BlogAPI {\r\n  //    Default Settings for the API Base URl\r\n  axiosInstance = axios.create({\r\n    baseURL: \"http://5d1b60a5dd81710014e886c4.mockapi.io/api/v1\",\r\n    timeout: 10000\r\n  });\r\n\r\n  // get single post based on provided ID\r\n  getPost = id => {\r\n    return this.axiosInstance.get(\"/posts/\" + id);\r\n  };\r\n\r\n  //   Get all posts from the API Call\r\n  getPosts = () => {\r\n    return this.axiosInstance.get(\"/posts\");\r\n  };\r\n\r\n  // New post submit to API\r\n  submitPost = postData => {\r\n    return this.axiosInstance.post(\"/posts\", {\r\n      title: postData.title,\r\n      body: postData.body,\r\n      tags: postData.tags\r\n    });\r\n  };\r\n\r\n  // Update the Existing Post\r\n  updatePost = (id, postData) => {\r\n    return this.axiosInstance.put('/posts/' + id,{\r\n      title:postData.title,\r\n      body:postData.body,\r\n      tags: postData.tags\r\n    })\r\n  }\r\n\r\n  // Delete the Exsiting Post\r\n  deletePost = (id) => {\r\n    return this.axiosInstance.delete('/posts/' + id)\r\n  }\r\n}\r\n\r\nexport default BlogAPI;\r\n","// React Imports\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//  Material UI imports\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { green } from \"@material-ui/core/colors\";\r\n// React Router Imports\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Custom Imports\r\nimport BlogAPI from \"../../services/BlogAPI\";\r\n\r\n// Custom Styles\r\nconst styles = theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    minWidth: 650\r\n  },\r\n  close: {\r\n    padding: theme.spacing(0.5)\r\n  },\r\n  success: {\r\n    backgroundColor: green[500]\r\n  }\r\n});\r\n\r\n// PostsList React Component\r\nclass PostList extends React.Component {\r\n  state = {\r\n    posts: [],\r\n    loading: true,\r\n    error: false,\r\n    errorMSG: \"\"\r\n  };\r\n\r\n  API = new BlogAPI();\r\n  getPosts = () => {\r\n    this.setState({\r\n      loading: true\r\n    });\r\n\r\n    this.API.getPosts()\r\n      .then(response => {\r\n        this.setState({\r\n          posts: response.data,\r\n          loading: false\r\n        });\r\n      })\r\n      .catch(errors => {\r\n        this.setState({\r\n          loading: false,\r\n          error: true,\r\n          errorMSG: errors\r\n        });\r\n      });\r\n  };\r\n  componentDidMount() {\r\n    this.getPosts();\r\n  }\r\n  deletePost = id => {\r\n    this.API.deletePost(id)\r\n      .then(response => {})\r\n      .catch(errors => {\r\n        this.setState({\r\n          error: true,\r\n          errorMSG: errors\r\n        });\r\n      })\r\n      .finally(() => {\r\n        this.getPosts();\r\n      });\r\n  };\r\n  render() {\r\n    const { classes } = this.props;\r\n    let data = \"\";\r\n    if (this.state.loading === true) {\r\n      data = <CircularProgress />;\r\n    } else if (this.state.error === true) {\r\n      data = (\r\n        <div>\r\n          Something Went Wrong\r\n          <p style={{ color: \"red\" }}>{this.state.errorMSG}</p>\r\n        </div>\r\n      );\r\n    } else {\r\n      data = (\r\n        <div>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={3} />\r\n            <Grid item xs={6}>\r\n              <Paper className={classes.root}>\r\n                <Table className={classes.table}>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Latest Blog Posts From the API</TableCell>\r\n                      <TableCell align=\"right\">&nbsp;</TableCell>\r\n                      <TableCell align=\"right\">&nbsp;</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {this.state.posts.map(row => (\r\n                      <TableRow key={row.id}>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          <Link to={\"/Blog-Reaction/post/\" + row.id}>\r\n                            {row.title}\r\n                          </Link>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            onClick={() => this.deletePost(row.id)}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </Button>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          <Link to={\"/Blog-Reaction/post/edit/\" + row.id}>\r\n                            <Button\r\n                              className={classes.button}\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                            >\r\n                              <EditIcon />\r\n                            </Button>\r\n                          </Link>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Link to=\"/Blog-Reaction/posts/new\">\r\n                {\" \"}\r\n                <Button variant=\"contained\" className={classes.success}>\r\n                  <AddIcon style={{ color: \"white\" }} />\r\n                </Button>\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\nPostList.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\nexport default withStyles(styles)(PostList);\r\n","// React Imports\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Material UI Import\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport BlogAPI from \"../../services/BlogAPI\";\r\n\r\nconst styles = theme => ({\r\n  card: {\r\n    minWidth: 275\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\"\r\n  },\r\n  title: {\r\n    fontSize: 14\r\n  },\r\n  pos: {\r\n    marginBottom: 12\r\n  }\r\n});\r\n\r\nclass PostView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: props.match.params.id,\r\n      post: {},\r\n      loading: true,\r\n      error: false,\r\n      errorMSG: \"\"\r\n    };\r\n  }\r\n\r\n  API = new BlogAPI();\r\n\r\n  getPost = () => {\r\n    this.setState({\r\n      loading: true\r\n    });\r\n    this.API.getPost(this.state.id)\r\n      .then(response => {\r\n        this.setState({\r\n          post: response.data,\r\n          loading: false\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        this.setState({\r\n          loading: false,\r\n          error: true,\r\n          errorMSG: error\r\n        });\r\n      })\r\n      .finally(() => {\r\n        console.log();\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getPost();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.id !== prevProps.id) {\r\n      this.getPost();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    let data = \"\";\r\n    if (this.state.loading === true) {\r\n      data = <CircularProgress />;\r\n    } else if (this.state.error === true) {\r\n      data = (\r\n        <div>\r\n          Something Went Wrong\r\n          <p style={{ color: \"red\" }}>{this.state.errorMSG}</p>\r\n        </div>\r\n      );\r\n    } else {\r\n      data = (<Grid container spacing={3}>\r\n      <Grid item xs={3}>\r\n        <Link to=\"/Blog-Reaction/posts\">\r\n          <Button variant=\"contained\" color=\"primary\">\r\n            Back to Posts\r\n          </Button>\r\n        </Link>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Card className={classes.card}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              {this.state.post.title}\r\n            </Typography>\r\n            <Typography className={classes.pos} color=\"textSecondary\">\r\n              {this.state.post.tags}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              {this.state.post.body}\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button size=\"small\" variant=\"contained\" color=\"inherit\">\r\n              share\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={3} />\r\n    </Grid>)\r\n    }\r\n    return data\r\n  }\r\n}\r\nPostView.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\nexport default withStyles(styles)(PostView);\r\n","// React Imports\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Material UI Imports\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n// React Router Imports\r\nimport { Redirect, Link } from \"react-router-dom\";\r\n\r\n// Custom Imports\r\nimport BlogAPI from \"../../services/BlogAPI\";\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  input: {\r\n    display: \"none\"\r\n  },\r\n  dense: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n});\r\nclass PostForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      postId: props.match.params.id,\r\n      updateMode: true,\r\n      title: \"\",\r\n      tags: \"\",\r\n      body: \"\",\r\n      redirect: false\r\n    };\r\n  }\r\n\r\n  API = new BlogAPI();\r\n  state = {\r\n    title: \"\",\r\n    tags: \"\",\r\n    body: \"\",\r\n    redirect: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.match.params.id === undefined) {\r\n      this.setState({\r\n        updateMode: false\r\n      });\r\n    }\r\n    if (this.state.postId !== undefined) {\r\n      this.getExistingPost();\r\n    }\r\n  }\r\n  // handle the change in input fields of the Form and\r\n  // set the values to States for Controlled Component\r\n  handleChange = name => event => {\r\n    this.setState({\r\n      [name]: event.target.value\r\n    });\r\n  };\r\n\r\n  // If form is in Update mode then data of existing\r\n  // post needs to be fetched and filled in form\r\n  getExistingPost = () => {\r\n    this.API.getPost(this.state.postId).then(response => {\r\n      let post = response.data;\r\n      this.setState({\r\n        title: post.title,\r\n        body: post.body,\r\n        tags: post.tags\r\n      });\r\n    });\r\n  };\r\n\r\n  // Submission of newly Created Post\r\n  submitNewPost = postData => {\r\n    this.API.submitPost(postData)\r\n      .then(response => {})\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n      .finally(() => {\r\n        this.setState({\r\n          redirect: true\r\n        });\r\n      });\r\n  };\r\n\r\n  // Submission of Existing Post with Updated Data\r\n  updateExistingPost = postData => {\r\n    this.API.updatePost(this.state.postId, postData)\r\n      .then(response => {})\r\n      .catch(errors => {\r\n        console.log(errors);\r\n      })\r\n      .finally(() => {\r\n        this.setState({\r\n          redirect: true\r\n        });\r\n      });\r\n  };\r\n\r\n  // handle the submission of new or updated post\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    let postData = {\r\n      title: this.state.title,\r\n      body: this.state.body,\r\n      tags: this.state.tags\r\n    };\r\n    if (this.state.updateMode === true) {\r\n      this.updateExistingPost(postData);\r\n    } else {\r\n      this.submitNewPost(postData);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    if (this.state.redirect === true) {\r\n      return <Redirect to=\"/posts\" push />;\r\n    } else {\r\n      let submitButton = (\r\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      );\r\n      if (this.state.updateMode === true) {\r\n        submitButton = (\r\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n            Update\r\n          </Button>\r\n        );\r\n      }\r\n      return (\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={3}>\r\n            <Link to=\"/Blog-Reaction/posts\">\r\n              <Button variant=\"contained\" color=\"secondary\" size=\"medium\">\r\n                Back to Posts\r\n              </Button>\r\n            </Link>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <form\r\n              className={classes.container}\r\n              onSubmit={this.handleFormSubmit}\r\n            >\r\n              <TextField\r\n                id=\"title\"\r\n                label=\"Post Title\"\r\n                className={classes.textField}\r\n                value={this.state.title}\r\n                onChange={this.handleChange(\"title\")}\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n              />\r\n              <br />\r\n              <TextField\r\n                id=\"body\"\r\n                label=\"Post body\"\r\n                multiline\r\n                rowsMax=\"4\"\r\n                value={this.state.body}\r\n                onChange={this.handleChange(\"body\")}\r\n                className={classes.textField}\r\n                margin=\"normal\"\r\n                helperText=\"Enter the Post body\"\r\n                variant=\"outlined\"\r\n              />\r\n              <br />\r\n              <TextField\r\n                id=\"tags\"\r\n                label=\"Post Tags\"\r\n                className={classes.textField}\r\n                value={this.state.tags}\r\n                onChange={this.handleChange(\"tags\")}\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n              />\r\n              <br />\r\n              {submitButton}\r\n            </form>\r\n          </Grid>\r\n          <Grid item xs={3} />\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nPostForm.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(PostForm);\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  input: {\r\n    display: \"none\"\r\n  }\r\n}));\r\n\r\nfunction Home() {\r\n    const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <h2>Welcome to First Blog in React Js</h2>\r\n      <Link to={\"/Blog-Reaction/posts\"}><Button variant=\"contained\" color=\"secondary\" className={classes.button}>\r\n            See Latest Posts\r\n        </Button></Link> \r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar/NavBar\";\nimport PostList from \"./components/posts/PostList\";\nimport PostView from \"./components/posts/PostView\";\nimport PostForm from \"./components/posts/PostForm\";\nimport Home from \"./components/Home\";\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        {/* <PostsList/> */}\n        <Switch>\n          <Route path=\"/Blog-Reaction\" exact component={Home} />\n          <Route path=\"/Blog-Reaction/posts\" exact component={PostList} />\n          <Route path=\"/Blog-Reaction/posts/new\" exact component={PostForm} />\n          <Route path=\"/Blog-Reaction/post/edit/:id\" exact component={PostForm} />\n          <Route path=\"/Blog-Reaction/post/:id\" exact component={PostView} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}