{"version":3,"sources":["components/posts/NewPost.js","components/posts/PostList.js","components/posts/PostView.js","App.js","serviceWorker.js","index.js"],"names":["NewPost","props","_this","Object","classCallCheck","this","console","log","possibleConstructorReturn","getPrototypeOf","call","state","posts","JSON","parse","localStorage","getItem","updatePosts","callback","formSubmitHandler","bind","assertThisInitialized","event","preventDefault","setState","title","document","getElementById","value","content","tags","postData","id","length","split","updatedData","concat","setItem","stringify","react_default","a","createElement","onSubmit","type","placeholder","React","Component","PostList","className","posts_NewPost","react_router_dom","to","map","postDetail","index","key","PostView","data","PostData","postTitle","postContent","postTag","postId","match","params","i","parseInt","join","Home","App","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3830c272.chunk.js","sourcesContent":["import React from \"react\";\r\nclass NewPost extends React.Component {\r\n  constructor(props) {\r\n    console.log(\"I am constructor\");\r\n    super(props);\r\n    this.state = {\r\n      posts: JSON.parse(localStorage.getItem(\"posts\")),\r\n      updatePosts: props.callback\r\n    };\r\n    this.formSubmitHandler = this.formSubmitHandler.bind(this);\r\n  }\r\n  formSubmitHandler(event) {\r\n    event.preventDefault();\r\n    this.setState({\r\n      posts: JSON.parse(localStorage.getItem(\"posts\"))\r\n    });\r\n    let title = document.getElementById(\"title\").value;\r\n    let content = document.getElementById(\"content\").value;\r\n    let tags = document.getElementById(\"tags\").value;\r\n    let postData = {\r\n      id: this.state.posts.length + 1,\r\n      title: title,\r\n      content: content,\r\n      tags: tags.split(\", \")\r\n    };\r\n    document.getElementById(\"title\").value = \"\";\r\n    document.getElementById(\"content\").value = \"\";\r\n    document.getElementById(\"tags\").value = \"\";\r\n\r\n    let updatedData = this.state.posts.concat(postData);\r\n    localStorage.setItem(\"posts\", JSON.stringify(updatedData));\r\n    this.state.updatePosts();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Add New Post</h2>\r\n        <br />\r\n        <form onSubmit={this.formSubmitHandler}>\r\n          <div>\r\n            <input type=\"text\" id=\"title\" placeholder=\"Enter Post Title\" />\r\n          </div>\r\n          <br />\r\n          <div>\r\n            <textarea type=\"text\" id=\"content\" placeholder=\"Enter Content\" />\r\n          </div>\r\n          <br />\r\n          <div>\r\n            <input type=\"text\" id=\"tags\" placeholder=\"Enter Post Tags\" />\r\n          </div>\r\n          <br />\r\n          <div>\r\n            <input type=\"submit\" value=\"Add post\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewPost;\r\n","import React, { Component } from \"react\";\r\nimport NewPost from \"../posts/NewPost\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../App.css\";\r\nclass PostList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: JSON.parse(localStorage.getItem(\"posts\"))\r\n    };\r\n    this.callback = this.callback.bind(this);\r\n  }\r\n  callback(event) {\r\n    console.log(\"Call Back\");\r\n    this.setState({ posts: JSON.parse(localStorage.getItem(\"posts\")) });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className={\"col-md-6\"}>\r\n          <NewPost callback={this.callback} />\r\n        </div>\r\n        <div>\r\n          <h1>Blog Posts</h1>\r\n          <Link to=\"/Blog-Reaction/home\">Home</Link>\r\n          {this.state.posts.map((postDetail, index) => {\r\n            return (\r\n              <div key={postDetail.id}>\r\n                <Link to={`/Blog-Reaction/post/${postDetail.id}`}>\r\n                  {postDetail.title}\r\n                </Link>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostList;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction PostView(data) {\r\n  let PostData = JSON.parse(localStorage.getItem(\"posts\"));\r\n  let postTitle = null;\r\n  let postContent = null;\r\n  let postTag = null;\r\n  console.log(data);\r\n  let postId = data.match.params.id;\r\n  for (var i = 0; i < PostData.length; i++) {\r\n    if (PostData[i].id === parseInt(postId)) {\r\n      postTitle = PostData[i].title;\r\n      postContent = PostData[i].content;\r\n      postTag = PostData[i].tags.join(\", \");\r\n      break;\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <h2>\r\n        <Link to={\"/Blog-Reaction/posts\"}>Back</Link>\r\n      </h2>\r\n      <h1>{postTitle}</h1>\r\n      <p>{postContent}</p>\r\n      <p>Tags: {postTag}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostView;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport PostList from \"./components/posts/PostList\";\nimport PostView from \"./components/posts/PostView\";\nimport \"./App.css\";\nimport PostData from \"../src/data/posts.json\";\nfunction App() {\n  localStorage.setItem(\"posts\", JSON.stringify(PostData))\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/Blog-Reaction\" exact component={Home} />\n          <Route path=\"/Blog-Reaction/home\" component={Home} />\n          <Route path=\"/Blog-Reaction/posts\" exact component={PostList} />\n          <Route path=\"/Blog-Reaction/post/:id\" component={PostView} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h1>Home Page</h1>\n      <h1>\n        <Link to={\"/Blog-Reaction/posts\"}>{\"BLOG\"}</Link>\n      </h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}