{"version":3,"sources":["api/BlogAPI.js","components/posts/NewPost.js","components/posts/PostView.js","components/posts/PostList.js","components/Home.js","components/navbar/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["BlogAPI","axiosInstance","axios","create","baseURL","timeout","getPost","id","_this","get","getPosts","submitPost","postData","post","title","body","tags","useStyles","makeStyles","theme","button","margin","spacing","input","display","dense","marginTop","NewPostForm","props","classes","_React$useState","React","useState","content","_React$useState2","Object","slicedToArray","values","setValues","handleChange","name","event","objectSpread","defineProperty","target","value","react_default","a","createElement","className","container","onSubmit","formSubmitHandler","TextField","label","textField","onChange","variant","multiline","rowsMax","helperText","SubmitButton","Button","color","type","NewPost","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","API","state","updatePosts","callback","bind","assertThisInitialized","_this2","preventDefault","document","getElementById","split","then","response","console","log","catch","error","finally","Component","PostView","postTitle","postBody","postTags","data","PostList","updatePostsState","setState","loading","posts","errorMSG","getSelectedPost","postID","selectedPost","map","postDetail","index","key","Paper","square","react_router_dom","to","concat","style","textDecoration","onClick","Divider","pageLayout","Fragment","CssBaseline","Grid","item","xs","posts_PostView","backgroundColor","height","posts_NewPost","Home","TabContainer","Typography","component","padding","children","root","flexGrow","palette","background","paper","NavBar","setValue","AppBar","position","Tabs","newValue","centered","Tab","Container","maxWidth","components_Home","posts_PostList","App","react_router","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bcf3a77f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nclass BlogAPI {\r\n  //    Default Settings for the API Base URl\r\n  axiosInstance = axios.create({\r\n    baseURL: \"http://5d1b60a5dd81710014e886c4.mockapi.io/api/v1\",\r\n    timeout: 1000\r\n  });\r\n\r\n  // get single post based on provided ID\r\n  getPost = id => {\r\n    return this.axiosInstance.get(\"/posts/\" + id);\r\n  };\r\n\r\n  //   Get all posts from the API Call\r\n  getPosts = () => {\r\n    return this.axiosInstance.get(\"/posts\");\r\n  };\r\n\r\n  // New post submit to API\r\n  submitPost = postData => {\r\n    return this.axiosInstance.post(\"/posts\", {\r\n      title: postData.title,\r\n      body: postData.body,\r\n      tags: postData.tags\r\n    });\r\n  };\r\n}\r\n\r\nexport default BlogAPI;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport BlogAPI from \"../../api/BlogAPI\";\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  input: {\r\n    display: \"none\"\r\n  },\r\n  dense: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nfunction NewPostForm(props) {\r\n  const classes = useStyles();\r\n  const [values, setValues] = React.useState({\r\n    title: \"Cat in the Hat\",\r\n    tags: \"\",\r\n    content: \"Controlled\"\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setValues({ ...values, [name]: event.target.value });\r\n  };\r\n  return (\r\n    <form className={classes.container} onSubmit={props.formSubmitHandler}>\r\n      <TextField\r\n        id=\"title\"\r\n        label=\"Post Title\"\r\n        className={classes.textField}\r\n        value={values.name}\r\n        onChange={handleChange(\"title\")}\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n      />\r\n      <br />\r\n      <TextField\r\n        id=\"content\"\r\n        label=\"Post Content\"\r\n        multiline\r\n        rowsMax=\"4\"\r\n        value={values.multiline}\r\n        onChange={handleChange(\"content\")}\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n        helperText=\"Enter the Post content\"\r\n        variant=\"outlined\"\r\n      />\r\n      <br />\r\n      <TextField\r\n        id=\"tags\"\r\n        label=\"Post Tags\"\r\n        className={classes.textField}\r\n        value={values.name}\r\n        onChange={handleChange(\"tags\")}\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n      />\r\n      <br />\r\n      <SubmitButton />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction SubmitButton() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Button\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      type=\"submit\"\r\n      className={classes.button}\r\n    >\r\n      Submit\r\n    </Button>\r\n  );\r\n}\r\n\r\nclass NewPost extends React.Component {\r\n  API = new BlogAPI();\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      updatePosts: props.callback\r\n    };\r\n    this.formSubmitHandler = this.formSubmitHandler.bind(this);\r\n  }\r\n\r\n  formSubmitHandler(event) {\r\n    event.preventDefault();\r\n    let title = document.getElementById(\"title\").value;\r\n    let content = document.getElementById(\"content\").value;\r\n    let tags = document.getElementById(\"tags\").value;\r\n\r\n    let postData = {\r\n      title: title,\r\n      body: content,\r\n      tags: tags.split(\", \")\r\n    };\r\n    this.API.submitPost(postData)\r\n      .then(response => {\r\n        console.log(response);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n      .finally(() => {\r\n        this.state.updatePosts();\r\n        document.getElementById(\"title\").value = \"\";\r\n        document.getElementById(\"content\").value = \"\";\r\n        document.getElementById(\"tags\").value = \"\";\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Add New Post</h2>\r\n        <br />\r\n        <NewPostForm formSubmitHandler={this.formSubmitHandler} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewPost;\r\n","import React from \"react\";\r\nimport BlogAPI from \"../../api/BlogAPI\";\r\n\r\nclass PostView extends React.Component {\r\n  API = new BlogAPI();\r\n  postTitle = \"\";\r\n  postBody = \"\";\r\n  postTags = \"\";\r\n  getPost = () => {\r\n    this.API.getPost(this.props.id)\r\n      .then(response => {\r\n        this.postTitle = response.data.title;\r\n        this.postBody = response.data.body;\r\n        this.postTags = response.data.tags;\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n      .finally(() => {\r\n        console.log();\r\n      });\r\n  };\r\n  componentDidMount() {\r\n    this.getPost();\r\n  }\r\n\r\n  componentWillUpdate() {\r\n    this.getPost();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>{this.postTitle}</h1>\r\n        <br />\r\n        <p>{this.postBody}</p>\r\n        <br />\r\n        <p>{this.postTags}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default PostView;\r\n","import React, { Component } from \"react\";\r\nimport NewPost from \"../posts/NewPost\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../App.css\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport PostView from \"./PostView\";\r\nimport BlogAPI from \"../../api/BlogAPI\";\r\nclass PostList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: [],\r\n      loading: true,\r\n      error: false,\r\n      errorMSG: \"\",\r\n      selectedPost: 6\r\n    };\r\n    this.callback = this.callback.bind(this);\r\n  }\r\n\r\n  API = new BlogAPI();\r\n\r\n  updatePostsState = () => {\r\n    this.setState({\r\n      loading: true\r\n    });\r\n    this.API.getPosts()\r\n      .then(response => {\r\n        this.setState({\r\n          posts: response.data\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        this.setState({\r\n          error: true,\r\n          errorMSG: error\r\n        });\r\n      })\r\n      .finally(() => {\r\n        this.setState({\r\n          loading: false\r\n        });\r\n      });\r\n  };\r\n  componentDidMount() {\r\n    this.updatePostsState();\r\n  }\r\n  // classes = useStyles();\r\n  callback(event) {\r\n    this.updatePostsState();\r\n  }\r\n\r\n  getSelectedPost = postID => {\r\n    this.setState({\r\n      selectedPost: postID\r\n    });\r\n    console.log(\"Selected Post: \" + this.state.selectedPost);\r\n  };\r\n  render() {\r\n    let data;\r\n    if (this.state.loading === true) {\r\n      data = \"LOADING....\";\r\n    } else if (this.state.error === true) {\r\n      data = this.state.errorMSG;\r\n    } else {\r\n      data = this.state.posts.map((postDetail, index) => {\r\n        return (\r\n          <div key={postDetail.id}>\r\n            <Paper className={\"root\"} square={false}>\r\n              {/* <Paper className={this.classes.root}> */}\r\n              <h3>\r\n                <Link\r\n                  to={`/Blog-Reaction/post/${postDetail.id}`}\r\n                  style={{ textDecoration: \"none\", color: \"black\" }}\r\n                  onClick={this.getSelectedPost.bind(null, postDetail.id)}\r\n                >\r\n                  {postDetail.title}\r\n                </Link>\r\n              </h3>\r\n            </Paper>\r\n            <Divider />\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n    let pageLayout = (\r\n      <React.Fragment>\r\n        <CssBaseline />\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={3}>\r\n            <PostView id={this.state.selectedPost} />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={6}\r\n            style={{ backgroundColor: \"#cfe8fc\", height: \"auto\" }}\r\n          >\r\n            {data}\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <NewPost callback={this.callback} />\r\n          </Grid>\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n    return <div>{pageLayout}</div>;\r\n  }\r\n}\r\n\r\nexport default PostList;\r\n","import React from \"react\";\r\n// import { makeStyles } from \"@material-ui/core/styles\";\r\n// import Button from \"@material-ui/core/Button\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\n// const useStyles = makeStyles(theme => ({\r\n//   button: {\r\n//     margin: theme.spacing(1)\r\n//   },\r\n//   input: {\r\n//     display: \"none\"\r\n//   }\r\n// }));\r\n\r\nfunction Home() {\r\n  //   const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <h2>Welcome to First Blog in React Js</h2>\r\n      {/* <Link to={\"/Blog-Reaction/posts\"}><Button variant=\"contained\" color=\"secondary\" className={classes.button}>\r\n            See Latest Posts\r\n        </Button></Link> */}\r\n      {/* <h1>Home Page</h1>\r\n      <h1>\r\n        <Link to={\"/Blog-Reaction/posts\"}>{\"BLOG\"}</Link>\r\n      </h1> */}\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AppBar, Tabs, Tab } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Home from \"../../components/Home\";\r\nimport PostList from \"../posts/PostList\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nfunction TabContainer(props) {\r\n  return (\r\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\nTabContainer.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\nexport default function NavBar() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  function handleChange(event, newValue) {\r\n    setValue(newValue);\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Tabs value={value} onChange={handleChange} centered>\r\n          <Tab label=\"Home\" />\r\n          <Tab label=\"About\" />\r\n          <Tab label=\"Blog\" />\r\n        </Tabs>\r\n      </AppBar>\r\n      {value === 0 && (\r\n        <TabContainer>\r\n          <React.Fragment>\r\n            <CssBaseline />\r\n            <Container maxWidth=\"md\">\r\n              <Home />\r\n              <Typography\r\n                component=\"div\"\r\n                style={{ backgroundColor: \"#cfe8fc\", height: \"50vh\" }}\r\n              />\r\n            </Container>\r\n          </React.Fragment>\r\n        </TabContainer>\r\n      )}\r\n      {value === 1 && (\r\n        <TabContainer>\r\n          <h2>About This Blog</h2>\r\n          <React.Fragment>\r\n            <CssBaseline />\r\n            <Container maxWidth=\"md\">\r\n              <Typography\r\n                component=\"div\"\r\n                style={{ backgroundColor: \"#cfe8fc\", height: \"50vh\" }}\r\n              />\r\n            </Container>\r\n          </React.Fragment>\r\n        </TabContainer>\r\n      )}\r\n      {value === 2 && (\r\n        <TabContainer>\r\n          <PostList />\r\n        </TabContainer>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport PostList from \"./components/posts/PostList\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar/NavBar\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n          {/* <Route path=\"/Blog-Reaction\" exact component={Home} /> */}\n          {/* <Route path=\"/Blog-Reaction/home\" component={Home} /> */}\n          <Route path=\"/Blog-Reaction/posts\" exact component={PostList} />\n          {/* <Route path=\"/Blog-Reaction/post/:id\" component={PostView} /> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}