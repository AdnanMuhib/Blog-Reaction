{"version":3,"sources":["components/posts/PostList.js","components/posts/PostView.js","App.js","serviceWorker.js","index.js"],"names":["PostList","react_default","a","createElement","react_router_dom","to","PostData","map","postDetail","index","key","id","concat","title","Component","PostView","data","postTitle","postContent","postTag","postId","match","params","i","length","parseInt","content","tags","join","Home","App","className","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAyBeA,mLAnBb,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,SAAT,QACCC,EAASC,IAAI,SAACC,EAAYC,GAC1B,OAAOR,EAAAC,EAAAC,cAAA,OAAKO,IAAKF,EAAWG,IAE1BV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAE,SAAAO,OAAWJ,EAAWG,KAC5BH,EAAWK,kBAXGC,aCoBRC,MApBf,SAAkBC,GAKd,IAJA,IAAIC,EAAY,KACZC,EAAc,KACdC,EAAU,KACVC,EAAUJ,EAAKK,MAAMC,OAAOX,GACvBY,EAAE,EAAGA,EAAEjB,EAASkB,OAAQD,IAC7B,GAAGjB,EAASiB,GAAGZ,KAAOc,SAASL,GAAS,CACpCH,EAAYX,EAASiB,GAAGV,MACxBK,EAAcZ,EAASiB,GAAGG,QAC1BP,EAAUb,EAASiB,GAAGI,KAAKC,KAAK,MAChC,MAGR,OAAQ3B,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAI,UAAV,SACJJ,EAAAC,EAAAC,cAAA,UAAKc,GACLhB,EAAAC,EAAAC,cAAA,SAAIe,GACJjB,EAAAC,EAAAC,cAAA,kBAAUgB,WCElB,SAASU,IACP,OACE5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAI,UAAW,UAKhByB,MAzBf,WACE,OACE7B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEAH,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACb9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWN,IACjC5B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAOC,KAAK,QAAQE,UAAWN,IAC/B5B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAOC,KAAK,SAASC,OAAK,EAACC,UAAWnC,IACtCC,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAOC,KAAM,YAAYE,UAAWpB,QCJxBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.73258563.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport PostData from '../../data/posts.json'\r\n\r\nimport {Link} from 'react-router-dom';\r\nclass PostList extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Blog Posts</h1>\r\n\r\n\t\t\t\t<Link to='/home' >Home</Link>\r\n\t\t\t\t{PostData.map((postDetail, index)=>{\r\n\t\t\t\t\treturn <div key={postDetail.id}>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Link to={`/post/${postDetail.id}`}>\r\n\t\t\t\t\t\t\t\t{postDetail.title}\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default PostList","import React from 'react'\r\nimport PostData from '../../data/posts.json'\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction PostView(data) {\r\n    let postTitle = null;\r\n    let postContent = null;\r\n    let postTag = null;\r\n    let postId =  data.match.params.id;\r\n    for (var i=0; i<PostData.length; i++) {\r\n        if(PostData[i].id === parseInt(postId)) {\r\n            postTitle = PostData[i].title\r\n            postContent = PostData[i].content\r\n            postTag = PostData[i].tags.join(', ')\r\n            break;\r\n        }\r\n    }\r\n    return (<div>\r\n        <h2><Link to={'/posts'}>Back</Link></h2>\r\n        <h1>{postTitle}</h1>\r\n        <p>{postContent}</p>\r\n        <p>Tags: {postTag}</p>\r\n    </div>)\r\n}\r\nexport default PostView","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch, Link} from 'react-router-dom'\n\nimport PostList from './components/posts/PostList'\nimport PostView from './components/posts/PostView'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      \n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/\" exact component={Home}/>\n        <Route path=\"/home\" component={Home}/>\n        <Route path=\"/posts\" exact component={PostList}/>\n        <Route path= \"/post/:id\" component={PostView}/>\n      </Switch>\n    </div>\n    </Router>\n  );\n}\n\nfunction Home(){\n  return (\n    <div>\n      <h1>Home Page</h1>\n      <h1><Link to={'/posts'}>{'BLOG'}</Link></h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}